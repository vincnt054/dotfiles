set preview true
set drawbox true
set ignorecase true

# Remove some defaults
map m
map o
map n
map "'"
map '"'
map d
map e
map c
map f
map y

cmd mkdir ${{
  printf "Directory Name: "
  read ans
  mkdir -p $ans
}}

cmd mkfile ${{
  printf "File Name: "
  read ans
  $EDITOR $ans
}}

cmd chmod ${{
  printf "Mode Bits: "
  read ans

  for file in "$fx"
  do
    chmod $ans $file
  done

  lf -remote 'send reload'
}}

# Archive bindings
cmd unarchive ${{
  case "$f" in
      *.zip) unzip "$f" ;;
      *.tar.gz) tar -xzvf "$f" ;;
      *.tar.bz2) tar -xjvf "$f" ;;
      *.tar) tar -xvf "$f" ;;
      *) echo "Unsupported format" ;;
  esac
}}

cmd trash ${{
  files=$(printf "$fx" | tr '\n' ';')
  while [ "$files" ]; do
    # extract the substring from start of string up to delimiter.
    # this is the first "element" of the string.
    file=${files%%;*}

    mv "$(basename "$file")" ~/.trash/
    # if there's only one element left, set `files` to an empty string.
    # this causes us to exit this `while` loop.
    # else, we delete the first "element" of the string from files, and move onto the next.
    if [ "$files" = "$file" ]; then
      files=''
    else
      files="${files#*;}"
    fi
  done
}}

cmd fzf_jump ${{
  res="$(find . -maxdepth 3 | fzf --reverse --header='Jump to location')"
  if [ -f "$res" ]; then
    cmd="select"
  elif [ -d "$res" ]; then
    cmd="cd"
  fi
  lf -remote "send $id $cmd \"$res\""
}}

cmd copy_path ${{
    echo -n "$f" | xsel -i; xsel -o | xsel -i -b
}}

# Basic
map . set hidden!
map dd trash
map p paste
map x cut
map yy copy
map yp copy_path
map md mkdir
map mf mkfile
map cc clear
map ch chmod
map r rename
map R reload
map u unselect

map f fzf_jump

map ee $$EDITOR "$f"
map ev $$EDITOR -R "$f"
map ex unarchive "$f"

map gd cd ~/documents
map gD cd ~/dl
map gc cd ~/.config
map gp cd ~/projects
